------------------- Intruduction ----------------------

1. Designing object-oriented software is hard, and designing reusable object oriented software is even harder. 
You must find pertinent objects, factor them into classes at the right granularity, define class interfaces and inheritance hierachies, and establish key relationships among them.
The design should be specific to the problem but also general enough to address future problems and requirements. 
Also avoid redesign or at least minimize it.

2. Design patterns help a software designer get a design "right" faster.

3. The book does not explain patterns dealing with concurency, distributed programming, real-time programming or application domain-specific patterns. It doesn't tell how to build user interfaces or how to write device drivers or how to use OOP database. All these have their own patters which should also be catalogued.

4. A pattern has 4 essential elements: pattern name, problem, solution and consequences.

5. A pattern name is a word which is used to describe the design problem, its solutions and consequences in one or two words.

6. The problem describes when to apply the pattern. It explains the problem and its context. Algorithms shown as objects, class or object structure, or it might include a list of conditions that must be met before it makes sense to apply the pattern.

7. The solution describes the elements that make up the design, theur relationships, responsibilities and collaborations. The solution does not describe concrete design or implementation because pattern is like a template that can be used in different situations.

8. The consequences are the results and trade-offs when applying the pattern. Consequences help evaluate the pattern, the costs and th benefits of its implementation. The consequences also describe the impact of a pattern on system's flexibility, extensibility or portability.

------------------ What is a Design Pattern? ----------------

9. Point of view affects one's interpretation of what is and what isn't a pattern. One person's pattern can be another person's primitive building block.

10. Design patterns have certain level of abstraction, meaning linked lists or hash tables are not design patters because they can have code implementation.

11. (Important) The design patterns in this book are descriptions of communicating objects and classes that are customized to solve a general design problem in a particular context.

12. (Important) The design pattern indetifies the participating classes, instances, their roles and collaborations and the distribution of responsibilities.

--------- Design Patterns in Smalltalk MVC ----------------

13. The Model/View/Controller (MVC) triad of classes was used to build user inter in Smalltalk-80. MVC consists of 3 kinds of objects. Model is the application object, the View is its screen representation and the Controller defines the way the use interface reacts to user input.

14. (Important) MVC decouples views and models by establishing a subscribe/notify protocol between them.

15. A view must ensure that its appearance reflects the state of the model. Whenever a model's data changes, the model notifies the views that depend on it. Each view gets an opportunity to update itself. This allows the designer to attach multiple views to a model to provide different representations. No need to rewrite the model.

16. MVC patter is described by more general pattern called Observer.

17. Views can also be nested. For example a control panel of buttons might be implemented as a complex view containing nested button views. 
The user interface for an object inspector can consist of nested views that may be reused in the debugger.

18. MVC supports nested views with CompositeView class and a subclass of View. CompositeView objects act just like View objects, meaning a composite view object can be used whenever a view can be used, but it also can contain and manage nested views.
This feature of MVC conforms to the Composite pattern.

19. MVC also allows changeing the way view responds to user input without changing its visual representation. Maybe make it respond to keyboard or have apop-up menu instead of command keys. MVC encaplusates the response mechanism in a Controller object. The controllers are ordered in class hierarchies making it easy to add new controller as a variation of existing one.

20. A view uses an instance of a Controller subclass to implement particular response strategy. To implement a different strategy simply replace the instace with different kind of controller. Its also even possible to change the controller at run-time.

21. The View-Controller relationship is an example of a Strategy design pattern. A strategy is an object that represents an algorithm. Its useful when you want to replace the algorightm either statically or dynamically, when there are lot of variants of the algorithm or when the algorithm has complex data structure that needs to be encapsulated.

22. MVC uses other desing patterns, such as Factory Method to specify the default controller class for a view and Decorator to add scrolling to a view. But the main relationships in MVC are given by Observer, Composite and Strategy design patterns.

------------------- Describing Desing Patterns ----------------

23. Properties of a design pattern: 
    a) Pattern name and classification, 
    b) Intent, 
    c) Also Known As, 
    d) Motivation, 
    e) Applicability, 
    f) Structure, 
    g) Participants, 
    h) Collaborations, 
    i) Consequences, 
    j) Implementation, 
    k) Sample Code, 
    l) Known Uses, 
    m) Related Patterns.

24. "Intent" is a short statement that answers the following questions: What does the pattern do? What is rationale and intent? What partucular desing issue or problem does it address?

25. "Also known as" describes other well known names for the pattern if any.

26. "Motivation" is a scenario that illustrates a design problem and how the class and object structures in the pattern solve the problem.

27. "Applicability" is what a re the situations in which the design pattern can be applied? 

28. "Structure" is a graphical representation of the classes in the pattern using a notation based on Object Modeling Technique (OMT). Intreraction diagrams are also used.

29. "Participants" are the classes and/or objects participating in the design pattern and their responsibilities.

30. "Collaborations" are how the participants collaborate to carry out their responsibilities.

31. "Consequences" cover how does the pattern support its objectives? What are the trade-offs
and results of using the pattern? What aspect of system structure does it let you vary independently?

32. "Implementation" explains what pitfals, hints or techniques should you be aware of when implementing the pattern? Are there language-specific issues?

33. "Sample code" are code fragments that illustrate how you might implement the pattern in C++ or Smalltalk.

34. "Known uses" cover examples of the pattern found in real systems. We include at least two
examples from different domains.

35. "Related patterns" cover what design patterns are closely related to this one? What are the
important differences? With which other patterns should this one be used?

36. First critetion for classification of patterns is "purpose". Patterns can serve creational, structural or behavioral purpose. Creational patterns concern the process of object creation. Structural patterns deal with the composition of classes or objects. Behavioral patterns characterize the ways in which classes or objects interact or distribute responsibility.

37. The second critetion is called "scope" and it specifies whether the pattern applies to classes or to objects. Class patterns deal with relationships between classes and their subclasses. The relationships are established trough inheritance so they are static-fixed at compile-time. Object patterns deal with object relationships, which can be changed at run-time and are more dynamic.

38. Almost all patterns use inheritance to some extent. 

39. Creational class patterns defer some part of object creation to subclasses, while creational object patterns defer it to another object.

40. The Structural class patterns use inheritance to compose classes, while the Structural object patterns describe ways to assmble objects. 

41. The behavioral class patterns use inheritance to describe algorithms and flow of control, whereas the Behavioral object patterns describe how a group of objects cooperate to perform a task that no single object can carry out alone.

42. Composite is often used with Iterator and Visitor.

43. Prototype is often alternative to Abstract Factory.

44. The structure diagrams of Composite and Decorator are similar though they have different intents.

--------------- How Design Patterns Solve Design Problems --------------------
--------------- Finding Appropriate Objects ------------------------

45. Object oriented programs are made of objects. An object packages both data and the procedures tha operate on that data. The procedures are typically called methods or operations. An object performs and operation when it receives a request(message) from a client. 

46. Requests are the only way to get an object to execute an operation. Operations are the only way to change an object's internal data. Because of these restrictions, the object's internal state is said to be encapsulated, it cannot be accessed directly and its representation is invisible from outside the object.

47. The hard part about object-oriented design is decomposing a system into objects. Its difficult because
 many factors come into play: encapsulation, granularity, dependency, flexibility, performance, evolution, reusability and more...
 
-------------- Determining Object Granularity --------------------

48. Objects can vary tremendously in size and number. They can be anything down to hardware or all the way up to entire applications. How do we decide what should be an object?

49. Facade pattern can represent complete subsystems as objects. 
Flyweight pattern can help supporting huge numbers of objects at the finest granularities. 
Abstract factory and Builder yield objects whose only purpose is to create other objects. 
Visitor and Command yield objects whose only purpose are to implement a request on another object or group of objects.

-------------- Specifying Object Interfaces -----------------------

50. Every operation declared by an object specifies the operation's name, the objects it takes as parameters and the operation's return value. This is known as operation's signature. 
The set of all signatures defined by an object's operations is called the interface to the object.

51. An object's interface characterizes the complete set of requests that can be sent to the object. 
Any request that matches a signature in the object's interface may be sent to the object.

52. A type is a name used to denote a particular interface. We speak of an object as having the type "Window" if it accepts all requests for the operations defined in the interface named "Window".
An object may have many types and widely different objects can share a type.

53. Part of the object's interface may be of one type, and other parts by other types.
Two objects of the same type need only share parts of their interfaces. Interfaces can contain other interfaces as subsets.
We say a type is subtype of another if its interfaces contains the interface of its supertype. Ofen we speak of a subtype inheriting the interface of its supertype.

54. Interfaces are fundamental in object-oriented systems. They are known only trough theis interfaces. You cannot know anything about the object without going trough its interface. 

55. An object's interface says nothing about its implementation. Different objects are free to implement requests differently. This means two objects having completely different implementations can have identical interfaces.

56. When a request is sent to an object, the particular operation that is performed depends on both the request and the receiving object. Different objects that support identical requests may have different implementations of the operations that fulfill these requests. 

57. The run-time association of a request to an object and of its operations is known as dynamic binding.
Dynamic binding means that issuin a request doesn't commit you to a particular implementation until run-time.

58. Dynamic binding allows you to substitute objects that have identical interfaces for each other at run-time. This substitutability is known as polymorphism and its a key concept in object-oriented systems. 

59. Polymorphism simplifies the definitions of clients, decouples objects from each other and lets them vary their relationships to each other at run-time.

60. Memento pattern describes how to encapsulate and save internal state of an object so that the object can be restored to that state later. Memento objects must define two interfaces: a restricted one that lets clients hold and copy mementos, and a privileged one that only the original object can use to store and retrieve state in the memento.

------------------- Specifying Object Implementations -------------------------

61. An object's implementation is defined by its class. The class specifies object's internal data and representation and defines the operations the object can perform.

62. Objects are created by instatiating a class. The object is set to be an instance of the class. The process of instatiating a class allocates storage for the object's internal data made up of instance variables and associates the operations with these data. Many similar instances can be created by instatiating a class.

63. A dashed arrowhead line indicates a class that instatiates objects of another class. 

64. We indicate the subclass relationship with a vertical line and a triangle. (class inheritance)

65. And abstract class is one whose main purpose is to define a common interface for its subclasses. 
An abstract class will defer some its implementation to operations defined in subclasses, hence an abstract class cannot be instatiated.

66. The operations that an abstract class defines but does not implement are called abstract operations. Classes that aren't abstract are called concrete classes.

67. A class may override an operation defined by its parent class. Overriding gives subclasses a chance to handle requests instead of their parent classes. 

68. A mixin class is a class that is intended to provide an optional interface or functionality to other classes. It is similar to an abstract class in that it is not intended to be instantiated. Mixin classes require multiple inheritance.

--------------- Class Versus Interface Inheritance ------------------------

69. An object's class defines how the object is implemented. In contrast, an object's type only refers to its interface, the set of requests to which it can respond. 

70. An object can have many types, and objects of different classes can have the same type. 

71. There is a close relationship between a class and a type. Class defines the operations an object can perform, it also defines the object's type. When we say an object is an instance of a class, we imply that the object supports the interface defined by the class.

72. Sending a message requires checking that the class of the receiver implements the message but it doesn't require checking that the receiver is an instance of a particular class. 

73. It's important to understand the difference between class inheritance and interface inheritance (or subtyping). Class inheritance defines an object's implementation in terms of another object's implementation. In short, it's a mechanism for code and representation sharing. In contrast, interface inheritance (or subtyping) describes when an object can be used in place of another.

74. 

--------------- Programming to an interface, not an Implementation ----------------------

75. There are two benefits to manipulating objects solely in terms of the interface
defined by abstract classes:
    a) Clients remain unaware of the specific types of objects they use, as long
    as the objects adhere to the interface that clients expect.
    b) Clients remain unaware of the classes that implement these objects. Clients
    only know about the abstract class(es) defining the interface.

76. Program to an interface, not an implementation.

77. Creational patterns ensure that your system is written in terms of interfaces, not implementations.

---------------- Putting Reuse Mechanisms to Work -------------------------

78. Most people can understand concepts like objects, interfaces, classes, and inheritance. The challenge lies in applying them to build flexible, reusable software, and design patterns can show you how.

---------------- Inheritance versus Composition ---------------------------

79. The two most common techniques for reusing functionality in object-oriented systems are class inheritance and object composition.

80. Reuse by subclassing is often referred to as white-box reuse. The term "white-box" refers to visibility: With inheritance, the internals of parent classes are often visible to subclasses

81. Object composition is an alternative to class inheritance. Here, new functionality is obtained by assembling or composing objects to get more complex functionality.

82. Object composition requires that the objects being composed have well-defined interfaces. This style of reuse is called black-box reuse, because no internal details of objects are visible. Objects appear only as "black boxes."

83. Inheritance and composition each have their advantages and disadvantages. Class inheritance is defined statically at compile-time and is straightforward to use, since it's supported directly by the programming language.

84. But class inheritance has some disadvantages, too. First, you can't change the implementations inherited from parent classes at run-time, because inheritance is defined at compile-time.

85. Second, and generally worse, parent classes often define at least part of their subclasses' physical representation. Because inheritance exposes a subclass to details of its parent's implementation, it's often said that "inheritance breaks encapsulation"

86. Should any aspect of the inherited implementation not be appropriate for new problem domains, the parent class must be rewritten or replaced by something more appropriate. This dependency limits flexibility and ultimately reusability. One cure for this is to inherit only from abstract classes, since they usually provide little or no implementation.

87. Object composition is defined dynamically at run-time through objects acquiring references to other objects. Because objects are accessed solely through their interfaces, we don't break encapsulation. Any
object can be replaced at run-time by another as long as it has the same type. Moreover, because an object's implementation will be written in terms of object interfaces, there are substantially fewer implementation dependencies.

88. Object composition has another effect on system design. Favoring object composition over class inheritance helps you keep each class encapsulated and focused on one task.

89. On the other hand, a design based on object composition will have more objects (if fewer classes), and the system's behavior will depend on their interrelationships instead of being defined in one class.

90. Favor object composition over class inheritance.

--------------------- Delegation --------------------------------

91. Delegation is a way of making composition as powerful for reuse as inheritance. In delegation, two objects are involved in handling a request: a receiving object delegates operations to its delegate. This is analogous to subclasses deferring requests to parent classes.

92. This is analogous to subclasses deferring requests to parent classes. But with inheritance, an inherited operation can always refer to the receiving object through the this member variable in C++ and self in Smalltalk.

93. For example, instead of making class Window a subclass of Rectangle (because windows happen to be rectangular), the Window class might reuse the behavior of Rectangle by keeping a Rectangle instance variable and delegating Rectangle-specific behavior to it. In other words, instead of a Window being a Rectangle, it would have a Rectangle. Window must now forward requests to its Rectangle instance explicitly, whereas before it would have inherited those operations.

94. A plain arrowhead line indicates that a class keeps a reference to an instance of another class. The reference has an optional name, "rectangle" in this case.

95. The main advantage of delegation is that it makes it easy to compose behaviors at run-time and to change the way they're composed. Our window can become circular at run-time simply by replacing its Rectangle instance with a Circle instance, assuming Rectangle and Circle have the same type.

96. Delegation has a disadvantage it shares with other techniques that make software more flexible through object composition: Dynamic, highly parameterized software is harder to understand than more static software.

97. Delegation is a good design choice only when it simplifies more than it complicates.

98. The State (338), Strategy (349), and Visitor (366) patterns depend on delegation.

99. Delegation is an extreme example of object composition. It shows that you can always replace inheritance with object composition as a mechanism for code reuse.

---------------------- Inheritance versus Parameterized Types ------------------------

100. Another (not strictly object-oriented) technique for reusing functionality is through parameterized types, also known as generics (Ada, Eiffel) and templates (C++).

101. Parameterized types give us a third way (in addition to class inheritance and object composition) to compose behavior in object-oriented systems.

102. To parameterize a sorting routine by the operation it uses to compare elements, we could make the comparison: 
    a) an operation implemented by subclasses (an application of Template Method (360),
    b) the responsibility of an object that's passed to the sorting routine (Strategy (349), or
    c) an argument of a C++ template or Ada generic that specifies the name of
    the function to call to compare the elements.
    
103. Inheritance lets you provide default implementations for operations and lets subclasses override them. Parameterized types let you change the types that a class can use. But neither inheritance nor parameterized types can change at run-time. Which approach is best depends on your design and implementation constraints.

----------------- Relating Run-Time and Compile-Time Structures ------------------------

104. An object-oriented program's run-time structure often bears little resemblance to its code structure. The code structure is frozen at compile-time; it consists of classes in fixed inheritance relationships.

105. A program's run-time structure consists of rapidly changing networks of communicating objects. In fact, the two structures are largely independent.

106. Consider the distinction between object aggregation and acquaintance and how differently they manifest themselves at compile- and run-times.

107. Aggregation implies that one object owns or is responsible for another object. Generally we speak of an object having or being part of another object. Aggregation implies that an aggregate object and its owner have identical lifetimes.

108. Acquaintance implies that an object merely knows of another object. Sometimes acquaintance is called "association" or the "using" relationship. Acquainted objects may request operations of each other, but they aren't responsible for each other. Acquaintance is a weaker relationship than aggregation and suggests much looser coupling between objects.

109. Many design patterns (in particular those that have object scope) capture the distinction between compile-time and run-time structures explicitly. Composite (183) and Decorator (196) are especially useful for building complex run-time structures. Observer (326) involves run-time structures that are often hard to
understand unless you know the pattern. Chain of Responsibility (251) also results in communication patterns that inheritance doesn't reveal. In general, the run-time structures aren't clear from the code until you understand the patterns.

----------------------- Designing for Change -------------------------

110. Here are some common causes of redesign along with the design pattern(s) that
address them:
    a) Creating an object by specifying a class explicitly. Specifying a class
    name when you create an object commits you to a particular implementation
    instead of a particular interface. This commitment can complicate future
    changes. To avoid it, create objects indirectly.
    Design patterns: Abstract Factory (99), Factory Method (121), Prototype (133).
    
    b) Dependence on specific operations. When you specify a particular operation,
    you commit to one way of satisfying a request. By avoiding hard-coded
    requests, you make it easier to change the way a request gets satisfied
    both at compile-time and at run-time.
    Design patterns: Chain of Responsibility (251), Command (263).
    
    c) Dependence on hardware and software platform. External operating system
    interfaces and application programming interfaces (APIs) are different on
    different hardware and software platforms. Software that depends on a
    particular platform will be harder to port to other platforms. It may even
    be difficult to keep it up to date on its native platform. It's important
    therefore to design your system to limit its platform dependencies.
    Design patterns: Abstract Factory (99), Bridge (171).
    
    d) Dependence on object representations or implementations. Clients that know
    how an object is represented, stored, located, or implemented might need
    to be changed when the object changes. Hiding this information from clients
    keeps changes from cascading.
    Design patterns: Abstract Factory (99), Bridge (171), Memento (316), Proxy (233).
    
    e) Algorithmic dependencies. Algorithms are often extended, optimized, and
    replaced during development and reuse. Objects that depend on an algorithm
    will have to change when the algorithm changes. Therefore algorithms that
    are likely to change should be isolated.
    Design patterns: Builder (110), Iterator (289), Strategy (349), Template Method (360), Visitor (366).
    
    f) Tight coupling. Classes that are tightly coupled are hard to reuse in
    isolation, since they depend on each other. Tight coupling leads to
    monolithic systems, where you can't change or remove a class without
    understanding and changing many other classes. The system becomes a dense
    mass that's hard to learn, port, and maintain.
    Loose coupling increases the probability that a class can be reused by itself
    and that a system can be learned, ported, modified, and extended more easily.
    Design patterns use techniques such as abstract coupling and layering to
    promote loosely coupled systems.
    Design patterns: Abstract Factory (99), Bridge (171), Chain of
    Responsibility (251), Command (263), Facade (208), Mediator (305), Observer (326).
    
    g) Extending functionality by subclassing. Customizing an object by
    subclassing often isn't easy. Every new class has a fixed implementation
    overhead (initialization, finalization, etc.). Defining a subclass also
    requires an in-depth understanding of the parent class. For example,
    overriding one operation might require overriding another. An overridden
    operation might be required to call an inherited operation. And subclassing
    can lead to an explosion of classes, because you might have to introduce
    many new subclasses for even a simple extension.
    Object composition in general and delegation in particular provide flexible
    alternatives to inheritance for combining behavior. New functionality can
    be added to an application by composing existing objects in new ways rather
    than by defining new subclasses of existing classes. On the other hand,
    heavy use of object composition can make designs harder to understand. Many
    design patterns produce designs in which you can introduce customized
    functionality just by defining one subclass and composing its instances
    with existing ones.
    Design patterns: Bridge (171), Chain of Responsibility (251), Composite
    (183), Decorator (196), Observer (326), Strategy (349).
    
    h) Inability to alter classes conveniently. Sometimes you have to modify a
    class that can't be modified conveniently. Perhaps you need the source code
    and don't have it (as may be the case with a commercial class library).
    Or maybe any change would require modifying lots of existing subclasses.
    Design patterns offer ways to modify classes in such circumstances.
    Design patterns: Adapter (157), Decorator (196), Visitor (366).
    
111. How crucial such flexibility is depends on the kind of software you're building. Let's look at the role design patterns play in the development of three broad classes of software: application programs, toolkits, and frameworks.

-------------------- Application Programs ----------------------

112. If you're building an application program such as a document editor or spreadsheet, then internal reuse, maintainability, and extension are high priorities.

-------------------- Toolkits ---------------------------------

113. Often an application will incorporate classes from one or more libraries of predefined classes called toolkits. A toolkit is a set of related and reusable classes designed to provide useful, general-purpose functionality. An example of a toolkit is a set of collection classes for lists, associative tables, stacks, and the like. The C++ I/O stream library is another example.

114. They let you as an implementer avoid recoding common functionality. Toolkits emphasize code reuse. They are the object-oriented equivalent of subroutine libraries.

115. Toolkit design is arguably harder than application design, because toolkits have to work in many applications to be useful. Moreover, the toolkit writer isn't in a position to know what those applications will be or their special needs.

------------------- Frameworks -------------------------

116. A framework is a set of cooperating classes that make up a reusable design for a specific class of software [Deu89, JF88]. For example, a framework can be geared toward building graphical editors for different domains like artistic drawing, music composition, and mechanical CAD [VL90, Joh92]. Another framework can help you build compilers for different programming languages and target machines [JML92]. Yet another might help you build financial modeling applications [BE93]. You customize a framework to a particular application by creating application-specific subclasses of abstract classes from the framework.

117. A framework predefines these design parameters so that you, the application designer/implementer, can concentrate on the specifics of your application. The framework captures the design decisions that are common to its application domain. Frameworks thus emphasize design reuse over code reuse, though a framework will usually include concrete subclasses you can put to work
immediately.

118. Reuse on this level leads to an inversion of control between the application and the software on which it's based. When you use a toolkit (or a conventional subroutine library for that matter), you write the main body of the application and call the code you want to reuse.

119. If applications are hard to design, and toolkits are harder, then frameworks are hardest of all. A framework designer gambles that one architecture will work for all applications in the domain.

120. Furthermore, because applications are so dependent on the framework for their design, they are particularly sensitive to changes in framework interfaces. As a framework evolves, applications have to evolve with it.

121. Mature frameworks usually incorporate several design patterns. The patterns help make the framework's
architecture suitable to many different applications without redesign.

122. An added benefit comes when the framework is documented with the design patterns it uses [BJ94]. People who know the patterns gain insight into the framework faster. Even people who don't know the patterns can benefit from the structure they lend to the framework's documentation. Enhancing documentation is important for all types of software, but it's particularly important for frameworks. Frameworks often pose a steep learning curve that must be overcome before they're useful. While design patterns might not flatten the learning curve entirely, they can make it less steep by making key elements of the framework's design more explicit.

123. Because patterns and frameworks have some similarities, people often wonder how or even if they differ. They are different in three major ways:
    a) Design patterns are more abstract than frameworks. Frameworks can be
    embodied in code, but only examples of patterns can be embodied in code.
    A strength of frameworks is that they can be written down in programming
    languages and not only studied but executed and reused directly. In contrast,
    the design patterns in this book have to be implemented each time they're
    used. Design patterns also explain the intent, trade-offs, and consequences
    of a design.
    
    b) Design patterns are smaller architectural elements than frameworks. A
    typical framework contains several design patterns, but the reverse is never
    true.
    
    c) Design patterns are less specialized than frameworks. Frameworks always
    have a particular application domain. A graphical editor framework might
    be used in a factory simulation, but it won't be mistaken for a simulation
    framework. In contrast, the design patterns in this catalog can be used
    in nearly any kind of application. While more specialized design patterns
    than ours are certainly possible (say, design patterns for distributed
    systems or concurrent programming), even these wouldn't dictate an
    application architecture like a framework would.
    
--------------------- How to Select a Design Pattern ----------------------

124. Here are several different approaches to finding the design pattern that's right for your problem:

--------------------- How to use a Design Pattern --------------------------
